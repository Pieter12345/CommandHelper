This page explains the templating system, and how it works. There are a number of systems that
interact together to produce these web pages, and if you wish to contribute, it is helpful to understand
how they work together. There are 3 main systems to be aware of. Initial template replacement, wiki replacement,
and page rendering.

== Initial template replacement and deployment ==

There are three processing stages. First, when the site is deployed, there is some template replacement done then.
The java uses <code>&lt;&#37;</code> and <code>&#37;&gt;</code> or for simple templates where arguments need not
also be parsed, just <code>&#37;&#37;</code> and <code>&#37;&#37;</code>. These allow the static pages to replace
information in them at deploy time, using the jar itself to do the templating work. This is useful for pages that
need information from the codebase, or it would in general be easier to parse the template in java instead of javascript.
The template replacement has the template name, and can also accept arguments, for instance 
<code>&lt;&#37;TEMPLATE_NAME&#37;&gt;</code> and for templates with arguments: 
<code>&lt;&#37;TEMPLATE_NAME|argument&#37;&gt;</code> where TEMPLATE_NAME is the name of the template, and arguments
are pipe separated. If the arguments have nested templates, they must use &lt;&#37; &#37;&gt;, the double percent
variety cannot be nested. Depending on where exactly the page contents were generated from, the templates that are
available may vary, and you'll need to trace the code for that specific page to see what templates are available. By and
large however, all templates defined in DocGenTemplates.java are available everywhere.

There are a few notable templates worth discussing.

* CODE|code - This syntax highlights pure mscript code.
* ALIAS|code - This syntax highlights mscript code that is defined in an msa file
* PRE|text - Creates a &lt;pre&gt; code block, escaping all html special characters in the text
* SYNTAX|type|code - Given the language or code type, will apply the proper html to make sure the text \
is syntax highlighted (for languages other than mscript)
* NOWIKI|text - Escapes the text, ensuring that no wiki markup will be processed.

There are several others worth looking at, see the DocGenTemplate.java source code for each.

After the templates are replaced, for pages, the file is inserted into the frame.html wrapper, which provides the
basic structure of the html document.

Different pages are generated from different sources, and may follow slightly different deployment rules, to see
the specific rules that are followed, see the SiteDeploy.java file. Note that several file types are automatically
scanned for, and their mere existence in the resources is enough to cause them to be processed. Other types of files
are manually listed, and may be handled differently. Consult the SiteDeploy file to see how each page is exactly generated.

Once the page is deployed, for html pages, they are also validated, so make sure that the page content will validate.

Several steps of the rendering stage are (currently) handled in javascript, including the wiki parsing, and syntax
highlighting for non-mscript code blocks.

== Client side rendering ==

The client renders the wiki formatting, as well as the syntax highlighting for non-mscript code blocks. Most simple
wiki markup is supported, including tables. See the [https://en.wikipedia.org/wiki/Help:Cheatsheet page here] for a
cheat sheet for this markup. Wiki templates (double left curly brace/double right curly brace) do not work, except for 
a very limited subset, including function, object, keyword, and TakeNote. Raw HTML is also supported, including script
tags, however, html should be avoided whenever possible.

If a page needs to run javascript, it can, by way of normal script tags. Do be aware that the typical jquery onload
mechanism does not work, because there is page rendering that needs to happen first. In order to properly hook into
the code after the page really is finished loading, a special promise object is defined. All your code should go in 
a block that looks like this:

%%SYNTAX|html|
<script type="text/javascript">
    pageRender.then(function() {
        // Your javascript code goes here
    });
</script>
%%

== Testing Locally ==

When making changes to the documentation, it may be worth running locally to see your changes before they go to the
live site.

There are multiple approaches here, this just provides one approach. The key is that you need a local web server
running, it's not sufficient to simply open the raw html files in your browser. These directions are the minimal
instructions, but you may use an existing server for viewing, or modify this approach to suit your needs.

Following these directions will help you view the site locally:

=== One time setup ===

[https://docs.npmjs.com/downloading-and-installing-node-js-and-npm Install node and npm.]

Create a configuration file somewhere on your file system, call it site-deploy-local.ini

<%SYNTAX|ini|
# This file is generated automatically. Changes made to the values of this file
# will persist, but changes to comments will not.

# The root location of the remote web server. This must be an absolute path. Note that this is the location of the *docs* 
# folder. Files may be created one directory above this folder, in this folder, and in lower folders that are created by 
# the site deploy tool. So if /var/www is your web root, then you should put /var/www/docs here. It will create an index 
# file in /var/www, as well as in /var/www/docs, but the majority of files will be put in /var/www/docs/3.3.4. If you
# are on Windows, use / as the directory separator, not \.
directory=REPLACEME

# The base url of the docs. This should begin with http:// or https://
docs-base=http://localhost:8080/docs/

# The hostname to scp to (not the hostname of the site). If the hostname is "localhost", this triggers special handling, 
# which skips the upload, and simply saves to the specified location on local disk. This should work with all OSes, 
# otherwise the host that this connects to must support ssh, though it does not necessarily have to be a unix based 
# system. If the value is localhost, the values username, port, and use-password are irrelevant, and not used. This 
# should NOT begin with a protocol, i.e. http://
hostname=localhost


# The base url of the site (where "home" should be). This should begin with http:// or https://
site-base=http://localhost:8080/

use-password=false
username=
validator-url=
post-script=null
port=22
install-url=
install-pub-keys=
install-pem-file=
show-template-credit=false
github-base-url=


%>

Change the ''directory'' value to wherever you intend on installing this locally. Make sure this directory path
ends in ''/docs''.

Next, we need to do the initial generation:

<%PRE|java -jar MethodScript.jar site-deploy -c site-deploy-local.ini%>

On the first run, this may take a while, so just sit back and relax.

=== Each dev session ===

From the command prompt, ''cd'' to one folder above where you specified in the ''directory'' value in the config (that
is, the root of the website) and run

<%PRE|npx http-server -p 8080 -c-1 -o "http://localhost:8080/index.html"%>

Alternatively, you can install the http-server package, and leave off the ''npx'' command. 

Leave this command window open while you develop. You may also wish to disable the cache in your web browser, so that
old versions of the pages won't be cached.

=== After making a change ===

Rebuild the project normally, using maven. (Note that it seems that maven doesn't always pick up the changes to resource
files, so you may need to do clean and build.) Then, from the cmdline, run

<%PRE|java -jar MethodScript.jar site-deploy -c site-deploy-local.ini --use-local-cache%>

Adding the ''--use-local-cache'' flag will potentially speed up the deployment. Refresh the webpage that was launched
by the http-server command.
